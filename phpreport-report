#!/usr/bin/env python3
#
# Copyright (C) 2012, 2013 Igalia S.L.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from phpreport import Credential
from phpreport import Customer
from phpreport import Project
from phpreport import PHPReport
from phpreport import User
from phpreport import TaskFilter

import argparse
import datetime
import multiprocessing
import os
import re
import textwrap
import sys
import urllib.request
import urllib.parse
import urllib.error


class DateUtils(datetime.date):
    @staticmethod
    def from_week_number(year, week):
        week_as_string = "%i %i 1" % (year, week)
        date = datetime.datetime.strptime(week_as_string, "%Y %W %w").date()

        # ISO8601 considers the first week of the year the first one that
        # contains a Thursday, but strptime does not. We need to account
        # for that.
        if datetime.date(year, 1, 4).isoweekday() > 4:
            date -= datetime.timedelta(days=7)

        return date

    @staticmethod
    def from_date_offset(date, day_offset):
        return date + datetime.timedelta(day_offset)

    @staticmethod
    def week_number(date):
        return date.isocalendar()[:2]

    @classmethod
    def monday(cls, date):
        return cls.from_week_number(*cls.week_number(date))

    @classmethod
    def next_week(cls, date):
        return cls.from_date_offset(date, 7)

    @classmethod
    def get_weeks_in_date_range(cls, start, end):
        week = start = cls.monday(start)
        end = cls.monday(end)

        weeks = []
        while week <= end:
            weeks.append(week)
            week = cls.next_week(week)
        return weeks

    @staticmethod
    def format_delta(delta):
        hours = (delta.days * 24) + (delta.seconds // 3600)
        seconds = (delta.seconds // 60) % 60
        return "%02i:%02i" % (hours, seconds)


class PeriodOfWork(object):
    def __init__(self, start_date, num_days, filter=TaskFilter(), tasks=None):
        self.start_date = start_date
        self.num_days = num_days
        self.users = set()
        self.tasks = tasks
        self.filter = filter.create_instance_for_dates(
            self.start_date,
            DateUtils.from_date_offset(self.start_date, num_days - 1))

    def get_users(self):
        self.get_tasks_if_necessary()
        return self.users

    def get_tasks_if_necessary(self):
        if self.tasks is None:
            PeriodOfWork.fetch_tasks_for_all([self])

    def set_tasks(self, tasks):
        self.tasks = []
        for task in tasks:
            self.add_task(task)

    def add_task(self, task):
        self.tasks.append(task)
        self.users.add(task.user)

    def filter_tasks(self, date=None, day_offset=None,
                     user=None, only_onsite=False):
        self.get_tasks_if_necessary()
        if date is None and day_offset is not None:
            date = DateUtils.from_date_offset(self.start_date, day_offset)

        def filter_task(task):
            if user is not None and task.user != user:
                return False
            if date is not None and task.date != date:
                return False
            if only_onsite and not(task.onsite):
                return False
            return True
        return list(filter(filter_task, self.tasks))

    def get_all_dates(self):
        return [DateUtils.from_date_offset(self.start_date, offset)
                for offset in range(0, self.num_days)]

    def time_worked(self, date=None, day_offset=None,
                    user=None, only_onsite=False):
        return sum([task.length() for task in
                    self.filter_tasks(date, day_offset, user, only_onsite)],
                   datetime.timedelta())

    @staticmethod
    def fetch_tasks_for_all(periods):
        filters = [period.filter for period in periods]
        tasks = PHPReport.get_tasks_for_task_filters(filters)
        for pair in zip(periods, tasks):
            pair[0].set_tasks(pair[1])


class WeekOfWork(PeriodOfWork):
    def __init__(self, year, week, filter=TaskFilter(), tasks=None):
        self.week = week
        self.year = year
        date = DateUtils.from_week_number(year, week)
        super(WeekOfWork, self).__init__(date, 7, filter, tasks)

    def __str__(self):
        return "Week %i of %i" % (self.week, self.year)

    def short_string(self):
        return "Week %i" % self.week

    def wiki_string(self):
        return "Week%i-%i" % (self.week, self.year)

    @classmethod
    def create_from_string(cls, string, filter):
        today = datetime.datetime.today()

        def split_single(string):
            if '/' not in string:
                return today.year, int(string.strip())
            else:
                week, year = string.split('/')
                return int(year.strip()), int(week.strip())

        if "-" not in string and "," not in string:
            split = split_single(string)
            return [cls(split[0], split[1], filter)]

        result = []
        for week_range in string.split(","):
            range_bounds = week_range.split("-")

            if '-' not in week_range:
                start = end = result.append(split_single(range_bounds))
            else:
                # FIXME: We don't yet support spanning a year.
                range_bounds = week_range.split("-")
                start = split_single(range_bounds[0])
                if len(range_bounds) == 1 or not range_bounds[1]:
                    end = today.isocalendar()[:2]
                else:
                    end = split_single(range_bounds[1])

            for week in range(start[1], end[1] + 1):
                result.append(cls(start[0], week, filter))

        cls.fetch_tasks_for_all(result)
        return result

    @classmethod
    def create_for_entire_project(cls, filter):
        assert(filter.project)

        tasks = PHPReport.get_tasks_for_task_filters([filter])
        tasks = [item for sublist in tasks for item in sublist]
        if not tasks:
            return []

        first_date = last_date = tasks[0].date
        for task in tasks[1:]:
            if task.date < first_date:
                first_date = task.date
            if task.date > last_date:
                last_date = task.date

        week_dates = DateUtils.get_weeks_in_date_range(first_date,
                                                       last_date)
        weeks = [cls(*DateUtils.week_number(date), filter=filter, tasks=[]) for date in week_dates]
        weeks_dict = {"{0}-{1}".format(week.year, week.week): week for week in weeks}

        for task in tasks:
            (year, week) = task.date.isocalendar()[:2]
            weeks_dict['{0}-{1}'.format(year, week)].add_task(task)

        return weeks


class Report(object):
    def __init__(self, header, wiki_string):
        self.header = header
        self.wiki_string = wiki_string


class AggregateReport(Report):
    def __init__(self, time_periods, formatter, header, wiki_string):
        super().__init__(header, wiki_string)
        self.time_periods = time_periods
        self.formatter = formatter
        self.parent = None

    def generate_report_for_period(self, period, table_contents):
        amount = period.time_worked()
        amount_onsite = period.time_worked(only_onsite=True)

        hours_worked_string = DateUtils.format_delta(amount)
        if amount_onsite:
            hours_worked_string += " (%s onsite)" % \
                    DateUtils.format_delta(amount_onsite)

        table_contents.append([period.short_string(), hours_worked_string])
        return (amount, amount_onsite)

    def generate_report(self):
        self.formatter.generate_header(self.header)

        table_contents = []
        total = datetime.timedelta()
        total_onsite = datetime.timedelta()
        for period in self.time_periods:
            (time, time_onsite) = self.generate_report_for_period(period, table_contents)
            total += time
            total_onsite += time_onsite

        self.formatter.generate_table(table_contents, has_headers=False)

        self.formatter.generate_header(
            "Total hours worked: %s" % DateUtils.format_delta(total))
        self.formatter.generate_header(
            "Total onsite hours worked: %s" % DateUtils.format_delta(total_onsite))
        return self.formatter.flatten()


class DetailedReport(Report):
    def __init__(self, time_period, parent, formatter, include_story=True):
        if parent:
            header = "{0} for {1}".format(time_period, parent.header)
            wiki_string = "{0}-{1}".format(parent.wiki_string, time_period.wiki_string())
        else:
            header = "{0} for {1}".format(time_period, str(time_period.filter))
            wiki_string = time_period.wiki_string()

        super().__init__(header, wiki_string)

        self.time_period = time_period
        self.formatter = formatter
        self.parent = parent
        self.include_story = include_story

    @staticmethod
    def format_date(date):
        return date.strftime("%d %b")

    def time_worked(self, user=None, total=False):
        if total:
            return [DateUtils.format_delta(self.time_period.time_worked(user=user))]
        all_dates = self.time_period.get_all_dates()
        return [DateUtils.format_delta(self.time_period.time_worked(date=x, user=user)) for x in all_dates]

    def generate_hours(self):
        table = []
        table.append([""] + list(map(DetailedReport.format_date, self.time_period.get_all_dates())) + ["Total"])
        for user in sorted(self.time_period.get_users()):
            table.append([user.login] +
                         self.time_worked(user=user) +
                         self.time_worked(user=user, total=True))
        table.append(["everyone"] +
                     self.time_worked() +
                     self.time_worked(total=True))
        self.formatter.generate_table(table)

        onsite_time = self.time_period.time_worked(only_onsite=True)
        if onsite_time > datetime.timedelta(0):
            self.formatter.generate_large_text("Onsite hours worked: %s" % DateUtils.format_delta(onsite_time))

    def get_stories_for_day_and_user(self, user, date):
        tasks_for_day = self.time_period.filter_tasks(date=date, user=user)

        def get_story(task):
            s = ""
            if self.include_story:
                s += self.formatter.format_story(task.story)
            if s:
                s += " "
            return s

        all_stories = [get_story(task) + task.text for task in tasks_for_day]

        # Many times people add a lot of duplicate descriptions. Just output
        # one of each, keeping the stories ordering
        all_stories = list(dict.fromkeys(all_stories))

        # Strip out duplicated whitespace
        def strip_whitespace(line):
            return re.compile(r'\s+').sub(' ', line)
        stripped_stories = []
        for story in all_stories:
          stripped = [strip_whitespace(line) for line in story.splitlines()
                                             if line.strip() != '']
          stripped_stories.append(os.linesep.join(stripped))

        return os.linesep.join(stripped_stories)

    def generate_stories_for_user(self, user):
        self.formatter.generate_section_header("Stories for %s" % user.login)

        all_dates = self.time_period.get_all_dates()
        contents = [(date.strftime("%A"), self.get_stories_for_day_and_user(user, date)) for date in all_dates]
        self.formatter.generate_aligned_list(contents)

    def generate_report(self):
        self.pieces = []
        self.formatter.generate_header(self.header)
        self.generate_hours()
        for user in sorted(self.time_period.users):
            self.generate_stories_for_user(user)
        return self.formatter.flatten()


class TextFormatter(object):
    def __init__(self):
        self.pieces = []

    def generate_table_row(self, columns, lengths, header=False):
        format_string = ""
        for length in lengths:
            format_string += "%%-%i.%is  " % (length, length)
        self.pieces.append(format_string % tuple(columns))
        self.pieces.append("\n")

    @staticmethod
    def generate_column_length_list(table):
        lengths = [list(map(len, x)) for x in table]  # Generate a table of lengths.
        # Turn the table of lengths into a row of max lengths for each column.
        return list(map(max, list(zip(*lengths))))

    def generate_table(self, table, has_headers=True):
        if not len(table):
            return

        lengths = TextFormatter.generate_column_length_list(table)
        self.generate_table_row(table[0], lengths, header=has_headers)
        for row in table[1:]:
            self.generate_table_row(row, lengths)

    def generate_aligned_list(self, contents):
        first_column_size = max([len(content[0]) for content in contents])
        format_string = "%%%i.%is: %%s\n" % (first_column_size, first_column_size)

        indent = (first_column_size + 2) * ' '  # Enough to account for the day name offset.
        width = 80 - len(indent)
        for content in contents:
            second_column = os.linesep.join(
                [textwrap.fill(line,
                               break_long_words=False,   # Don't break URLs.
                               replace_whitespace=False, # Already done. Don't remove newlines
                               width=width,
                               initial_indent=indent,
                               subsequent_indent=indent)
                 for line in content[1].splitlines()]).strip()
            self.pieces.append(format_string % (content[0], second_column))

    def generate_header(self, header):
        self.pieces.append("\n%s\n" % header)

    def generate_section_header(self, header):
        self.pieces.append("\n%s\n" % header)

    def generate_large_text(self, text):
        self.pieces.append("%s\n" % text)

    def format_story(self, story):
            if story:
                return "[{}]".format(story)
            else:
                return ""

    def flatten(self):
        return "".join(self.pieces)


class TwikiFormatter(TextFormatter):
    def generate_table_row(self, columns, lengths=None, header=False, highlight_first=True):
        first = "| *%s* "
        if not highlight_first:
            first = "| %s"

        if header:
            format_string = first + (len(columns) - 2) * " | *%s*" + " | *%s* |"
        else:
            format_string = first + (len(columns) - 2) * " | %s" + " | %s |"

        self.pieces.append(format_string % tuple(columns))
        self.pieces.append("\n")

    def generate_table(self, table, has_headers=True):
        if len(table) < 10 or has_headers:
            return super(TwikiFormatter, self).generate_table(table, has_headers)

        def chunks_of_n(l, n):
            for i in range(0, len(l), n):
                yield l[i:i+n]

        def transpose_to_columns(lists):
            return list(map(lambda *row: [elem or ['', ''] for elem in row], *lists))

        table = chunks_of_n(table, 10)
        table = transpose_to_columns(table)
        for row in table:
            # Now we have a row of pairs, but we need to flatten it.
            row = sum(row, [])
            self.generate_table_row(row, highlight_first=False)

    def generate_header(self, header):
        self.pieces.append("\n---++%s\n" % header)

    def generate_section_header(self, header):
        self.pieces.append("\n---++++%s\n" % header)

    def generate_aligned_list(self, contents):
        for content in contents:
            self.pieces.append("   * *%s* - %s\n" % (content[0], content[1]))


class MarkdownFormatter(TextFormatter):
    def generate_table(self, table, has_headers=True):
        return ""

    def generate_header(self, header):
        self.pieces.append("\n# %s\n" % header)

    def generate_section_header(self, header):
        self.pieces.append("\n## %s\n" % header)

    def generate_aligned_list(self, contents):
        self.pieces.append("\n")
        for content in contents:
            self.pieces.append(" * **%s** %s\n" % (content[0], content[1]))

    def format_story(self, story):
        if story:
            return "*{}*".format(story)
        return ""


def send_url_request(request):
    try:
        urllib.request.urlopen(request)
    except Exception as e:
        print(e)
        print("Could not complete upload to TWiki at %s" % request.get_full_url())


class TwikiUploader(object):
    def __init__(self, url, section="Main", username=None, password=None):
        self.url = url
        self.section = section

        # Ensure that we can log in to the TWiki with HTTP authentication.
        Credential(self.url, username, password).activate()

    def add_links_for_short_strings(self, contents, reports):
        for report in reports:
            if not hasattr(report, "time_period"):
                continue

            short_string = report.time_period.short_string()
            contents = re.sub("%s(\W)" % short_string,
                              "[[%s][%s]]\g<1>" % (report.wiki_string, short_string),
                              contents)
        return contents

    def upload(self, reports, all_reports):
        requests = [self.prepare_report(report, all_reports) for report in reports]
        pool = multiprocessing.Pool(processes=10)
        return pool.map(send_url_request, requests)

    def prepare_report(self, report, all_reports):
        page_name = report.wiki_string

        full_save_url = "%s/twiki/bin/save/%s/%s" % (self.url, self.section, page_name)
        full_view_url = "%s/twiki/bin/view/%s/%s" % (self.url, self.section, page_name)
        print("Uploading report to %s" % full_view_url)

        request = urllib.request.Request(full_save_url)

        contents = self.add_links_for_short_strings(report.generate_report(), all_reports)
        request_data = {'text': contents.encode('latin1')}
        if report.parent:
            request_data['topicparent'] = report.parent.wiki_string

        request.data = urllib.parse.urlencode(request_data).encode('latin1')
        return request


def choose_from_list(items):
    assert(len(items) > 1)

    print("\nMultiple {0}s matching description. Please choose one:".format(items[0].__class__.__name__.lower()))
    for index, item in enumerate(items):
        print("    {0}. {1}".format(index, item))

    while(True):
        try:
            index = int(input(">> "))
            if index >= 0 and index < len(items):
                return items[index]
        except ValueError:
            pass

        print("Not a valid index. Type a number between 0 and {0} and press enter.".format(len(items) - 1))


def create_task_filter_from_args(args):
    customer = None
    project = None
    user = None

    def filter_instances(instances, search_string):
        terms = search_string.lower().split(',')

        def matches_all(instance):
            for term in terms:
                if not instance.match(term):
                    return False
            return True
        return list(filter(matches_all, instances))

    # FIXME: We should really support choosing selecting more than one
    # customer or project.
    if args.project is not None:
        projects = filter_instances(list(Project.instances.values()), args.project)
        if not len(projects):
            print("Could not find any projects matching '%s'" % args.project)
            sys.exit(1)
        elif len(projects) > 1:
            projects.sort(reverse=True)
            project = choose_from_list(projects)
        else:
            project = projects[0]

    if args.customer is not None:
        customers = filter_instances(list(Customer.instances.values()), args.customer)
        if not len(customers):
            print("Could not find any customers matching '%s'" % args.customer)
            sys.exit(1)
        elif len(customers) > 1:
            customer = choose_from_list(customers)
        else:
            customer = customers[0]

    if args.user is not None:
        users = [x for x in list(User.instances.values()) if x.login == args.user]
        if not len(users):
            print("Could not find any users matching '%s'" % args.user)
            sys.exit(1)
        elif len(users) > 1:
            user = choose_from_list(users)
        else:
            user = users[0]

    return TaskFilter(project=project, customer=customer, user=user)


class ReportCreator(object):
    class Mode:
        Project, Aggregate, Detail = range(3)

    def __init__(self, args, task_filter):
        self.args = args
        self.task_filter = task_filter

        # This may actually fetch the tasks as a side-effect.
        if not args.week:
            self.time_periods = WeekOfWork.create_for_entire_project(task_filter)
            self.mode = ReportCreator.Mode.Project

        elif args.week:
            self.time_periods = WeekOfWork.create_from_string(args.week, task_filter)
            if len(self.time_periods) > 1:
                self.mode = ReportCreator.Mode.Aggregate
            else:
                self.mode = ReportCreator.Mode.Detail

        self.parent_report = None
        self.reports = []

    def formatter(self):
        if self.args.formatter == "twiki" or args.twiki:
            return TwikiFormatter()
        elif self.args.formatter == "markdown":
            return MarkdownFormatter()
        else:
            return TextFormatter()

    def create_parent_report(self):
        if self.mode == ReportCreator.Mode.Project:
            project = self.task_filter.project
            return AggregateReport(self.time_periods, self.formatter(),
                                   project.description,
                                   re.sub(r'[^a-zA-Z0-9]', '', project.description) + "Report")

        elif self.mode == ReportCreator.Mode.Aggregate:
            return AggregateReport(self.time_periods, self.formatter(),
                                   "%s to %s for %s" %
                                   (self.time_periods[0],
                                    self.time_periods[-1],
                                    self.time_periods[0].filter),
                                   "%sTo%s" %
                                   (self.time_periods[0].wiki_string(),
                                    self.time_periods[-1].wiki_string()))
        else:
            return None

    def create_reports(self):
        self.parent_report = self.create_parent_report()

        for period in self.time_periods:
            self.reports.append(DetailedReport(time_period=period,
                                               parent=self.parent_report,
                                               formatter=self.formatter(),
                                               include_story=args.story))

    def output_report_list(self, report_list):
        if args.twiki:
            uploader = TwikiUploader(url=self.args.twiki,
                                     username=PHPReport.credential.username,
                                     password=PHPReport.credential.password)
            uploader.upload(report_list, self.reports)
        else:
            for report in report_list:
                print(report.generate_report())

    def output_reports(self):
        # We output the parent first for the Twiki uploader,
        # because the children depend on the existence of the parent.
        if args.twiki and self.parent_report:
            self.output_report_list([self.parent_report])

        self.output_report_list(self.reports)

        if not(args.twiki) and self.parent_report:
            self.output_report_list([self.parent_report])


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-l', '--login', type=str,
                        help="login name for PHPReport and TWiki")
    parser.add_argument('-p', '--project', type=str,
                        help="only consider tasks matching given project search string")
    parser.add_argument('-c', '--customer', type=str,
                        help="only consider tasks matching given customer search string")
    parser.add_argument('-u', '--user', type=str,
                        help="only consider tasks logged by the given user")
    parser.add_argument('-w', '--week', type=str,
                        default=None,
                        help="Week or week range of tasks to show. A year can optionally be specified using the syntax <week>/<year>.")
    parser.add_argument('-f', '--formatter', choices=['text', 'twiki', 'markdown'],
                        default="text", help="output format for report")
    parser.add_argument('--twiki', metavar="TWIKI_URL", type=str,
                        help="Use TWiki mode, which uploads both detailed and aggregate reports to the given TWiki URL.")
    parser.add_argument('--no-story', action='store_false', dest='story',
                        help="Do not include the story tag in the output")
    args = parser.parse_args()

    if not args.project and not args.customer and not args.user:
        print("Must give either a customer (-c) search string or a product search string (-p)")
        sys.exit(1)

    if not args.week and not args.project:
        print("Must give either a project (-p) or a week range (-w)")
        sys.exit(1)

    PHPReport.login(username=args.login)

    report_creator = ReportCreator(args, create_task_filter_from_args(args))
    report_creator.create_reports()
    report_creator.output_reports()
